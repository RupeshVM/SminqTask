package rupvm.sminqtask.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK__FILES__TABLE".
*/
public class TASK_FILES_TABLEDao extends AbstractDao<TASK_FILES_TABLE, Long> {

    public static final String TABLENAME = "TASK__FILES__TABLE";

    /**
     * Properties of entity TASK_FILES_TABLE.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FILEID = new Property(0, Long.class, "FILEID", true, "FILEID");
        public final static Property TASKID = new Property(1, Long.class, "TASKID", false, "TASKID");
        public final static Property FILEURL = new Property(2, String.class, "FILEURL", false, "FILEURL");
        public final static Property UPLOADSTATUS = new Property(3, Integer.class, "UPLOADSTATUS", false, "UPLOADSTATUS");
    };


    public TASK_FILES_TABLEDao(DaoConfig config) {
        super(config);
    }
    
    public TASK_FILES_TABLEDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK__FILES__TABLE\" (" + //
                "\"FILEID\" INTEGER PRIMARY KEY ," + // 0: FILEID
                "\"TASKID\" INTEGER," + // 1: TASKID
                "\"FILEURL\" TEXT," + // 2: FILEURL
                "\"UPLOADSTATUS\" INTEGER);"); // 3: UPLOADSTATUS
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK__FILES__TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TASK_FILES_TABLE entity) {
        stmt.clearBindings();
 
        Long FILEID = entity.getFILEID();
        if (FILEID != null) {
            stmt.bindLong(1, FILEID);
        }
 
        Long TASKID = entity.getTASKID();
        if (TASKID != null) {
            stmt.bindLong(2, TASKID);
        }
 
        String FILEURL = entity.getFILEURL();
        if (FILEURL != null) {
            stmt.bindString(3, FILEURL);
        }
 
        Integer UPLOADSTATUS = entity.getUPLOADSTATUS();
        if (UPLOADSTATUS != null) {
            stmt.bindLong(4, UPLOADSTATUS);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TASK_FILES_TABLE entity) {
        stmt.clearBindings();
 
        Long FILEID = entity.getFILEID();
        if (FILEID != null) {
            stmt.bindLong(1, FILEID);
        }
 
        Long TASKID = entity.getTASKID();
        if (TASKID != null) {
            stmt.bindLong(2, TASKID);
        }
 
        String FILEURL = entity.getFILEURL();
        if (FILEURL != null) {
            stmt.bindString(3, FILEURL);
        }
 
        Integer UPLOADSTATUS = entity.getUPLOADSTATUS();
        if (UPLOADSTATUS != null) {
            stmt.bindLong(4, UPLOADSTATUS);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TASK_FILES_TABLE readEntity(Cursor cursor, int offset) {
        TASK_FILES_TABLE entity = new TASK_FILES_TABLE( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // FILEID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // TASKID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FILEURL
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // UPLOADSTATUS
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TASK_FILES_TABLE entity, int offset) {
        entity.setFILEID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTASKID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFILEURL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUPLOADSTATUS(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TASK_FILES_TABLE entity, long rowId) {
        entity.setFILEID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TASK_FILES_TABLE entity) {
        if(entity != null) {
            return entity.getFILEID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
